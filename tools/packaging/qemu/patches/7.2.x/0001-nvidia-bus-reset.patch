diff --git a/hw/vfio/pci-quirks.c b/hw/vfio/pci-quirks.c
index f0147a050a..0dc01fe5a4 100644
--- a/hw/vfio/pci-quirks.c
+++ b/hw/vfio/pci-quirks.c
@@ -1441,6 +1441,21 @@ out:
     return ret;
 }
 
+void vfio_exit_quirks(VFIOPCIDevice *vdev)
+{
+    uint16_t dev_class = 0;
+
+    if (vdev->vendor_id == PCI_VENDOR_ID_NVIDIA) {
+        dev_class = vfio_get_pci_class(vdev);
+        if ((dev_class == PCI_CLASS_DISPLAY_VGA) || (dev_class == PCI_CLASS_DISPLAY_3D)) {
+            /* perform a bus reset */
+            vfio_pci_hot_reset(vdev, true, true);
+            sleep(SBR_DELAY_SECS);
+        }
+    }
+
+}
+
 void vfio_setup_resetfn_quirk(VFIOPCIDevice *vdev)
 {
     switch (vdev->vendor_id) {
diff --git a/hw/vfio/pci.c b/hw/vfio/pci.c
index 71509f9c7e..76f2a89736 100644
--- a/hw/vfio/pci.c
+++ b/hw/vfio/pci.c
@@ -2247,7 +2247,7 @@ static bool vfio_pci_host_match(PCIHostDeviceAddress *addr, const char *name)
     return (strcmp(tmp, name) == 0);
 }
 
-static int vfio_pci_hot_reset(VFIOPCIDevice *vdev, bool single)
+int vfio_pci_hot_reset(VFIOPCIDevice *vdev, bool single, bool reset_only)
 {
     VFIOGroup *group;
     struct vfio_pci_hot_reset_info *info;
@@ -2381,6 +2381,9 @@ static int vfio_pci_hot_reset(VFIOPCIDevice *vdev, bool single)
 
     trace_vfio_pci_hot_reset_result(vdev->vbasedev.name,
                                     ret ? strerror(errno) : "Success");
+    if (reset_only) {
+        goto out_reset_only;
+    }
 
 out:
     /* Re-enable INTx on affected devices */
@@ -2424,6 +2427,7 @@ out_single:
     if (!single) {
         vfio_pci_post_reset(vdev);
     }
+out_reset_only:
     g_free(info);
 
     return ret;
@@ -2446,13 +2450,13 @@ out_single:
  */
 static int vfio_pci_hot_reset_one(VFIOPCIDevice *vdev)
 {
-    return vfio_pci_hot_reset(vdev, true);
+    return vfio_pci_hot_reset(vdev, true, false);
 }
 
 static int vfio_pci_hot_reset_multi(VFIODevice *vbasedev)
 {
     VFIOPCIDevice *vdev = container_of(vbasedev, VFIOPCIDevice, vbasedev);
-    return vfio_pci_hot_reset(vdev, false);
+    return vfio_pci_hot_reset(vdev, false, false);
 }
 
 static void vfio_pci_compute_needs_reset(VFIODevice *vbasedev)
@@ -3196,6 +3200,7 @@ static void vfio_exitfn(PCIDevice *pdev)
 {
     VFIOPCIDevice *vdev = VFIO_PCI(pdev);
 
+    vfio_exit_quirks(vdev);
     vfio_unregister_req_notifier(vdev);
     vfio_unregister_err_notifier(vdev);
     pci_device_set_intx_routing_notifier(&vdev->pdev, NULL);
diff --git a/hw/vfio/pci.h b/hw/vfio/pci.h
index 7c236a52f4..53f4bac60f 100644
--- a/hw/vfio/pci.h
+++ b/hw/vfio/pci.h
@@ -22,6 +22,7 @@
 #include "sysemu/kvm.h"
 
 #define PCI_ANY_ID (~0)
+#define SBR_DELAY_SECS 5
 
 struct VFIOPCIDevice;
 
@@ -192,6 +193,12 @@ static inline bool vfio_is_vga(VFIOPCIDevice *vdev)
     return class == PCI_CLASS_DISPLAY_VGA;
 }
 
+static inline uint16_t vfio_get_pci_class(VFIOPCIDevice *vdev)
+{
+    PCIDevice *pdev = &vdev->pdev;
+    return pci_get_word(pdev->config + PCI_CLASS_DEVICE);
+}
+
 uint32_t vfio_pci_read_config(PCIDevice *pdev, uint32_t addr, int len);
 void vfio_pci_write_config(PCIDevice *pdev,
                            uint32_t addr, uint32_t val, int len);
@@ -225,5 +232,7 @@ int vfio_pci_nvlink2_init(VFIOPCIDevice *vdev, Error **errp);
 void vfio_display_reset(VFIOPCIDevice *vdev);
 int vfio_display_probe(VFIOPCIDevice *vdev, Error **errp);
 void vfio_display_finalize(VFIOPCIDevice *vdev);
+int vfio_pci_hot_reset(VFIOPCIDevice *vdev, bool single, bool reset_only);
+void vfio_exit_quirks(VFIOPCIDevice *vdev);
 
 #endif /* HW_VFIO_VFIO_PCI_H */
